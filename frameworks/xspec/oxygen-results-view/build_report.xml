<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       build.xml                                                -->
<!--  Author:     Jeni Tennison                                            -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2008, 2010 Jeni Tennison (see end of file.)          -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


<project name="xspec" default="xspec">
  <description>XSpec is a Behavior Driven Development (BDD) framework for XSLT and XQuery.
    
    Usage:
    
    ant -Dxspec.xml=filename
    
    where:
    
    filename          XSpec tests XML file
    
    
  </description>
  
  <dirname property="xspec.project.dir" file="${ant.file.xspec}"/>
  
  <!-- File of properties determining or describing local
       configuration. -->
  <property name="xspec.properties" location="${xspec.project.dir}/xspec.properties"/>
  <property file="${xspec.properties}"/>
  
  
  <!-- saxon.jar location depends on OS. -->
  <condition property="saxon.jar" value="${saxon.jar.windows}">
    <os family="windows" />
  </condition>
  <condition property="saxon.jar" value="${saxon.jar.mac}">
    <os family="mac" />
  </condition>
  <condition property="saxon.jar" value="${saxon.jar.unix}">
    <os family="unix" />
  </condition>
  
  <property name="saxon.home" location="/Library/Application Support/saxonb9" />
  <property name="saxon.jar" location="${saxon.home}/saxon9.jar" />
  
  <dirname property="xspec.base.dir" file="${xspec.xml}" />
  <basename property="xspec.xml.base" file="${xspec.xml}" suffix=".xml" />
  <basename property="xspec.base" file="${xspec.xml.base}" suffix=".xspec" />
  
  <property name="xspec.dir"
    value="${xspec.base.dir}/xspec" />
  
  <property name="xspec.xsl"
    value="${xspec.dir}/${xspec.base}.xsl" />
  <property name="xspec.result.xml"
    value="${xspec.dir}/${xspec.base}-result.xml" />
  <property name="xspec.result.html"
    value="${xspec.dir}/${xspec.base}-result.html" />
  
  <!-- OXYGEN PATCH needed to create a custom Saxon, for example  -warnings:recover -strip:none -opt:10 -dtd:off -l:off -versionmsg:off -expand:on -outval:fatal -val:lax -->
  <property name="saxon.custom.options" value=""/>
  <!-- OXYGEN PATCH END -->
  
  <!-- OXYGEN PATCH needed to control the cleanup of all intermediate files -->
  <property name="clean.output.dir" value="false"/>
  <!-- OXYGEN PATCH END -->
  
  <!-- OXYGEN PATCH needed to customize the HTML result. -->
  <property name="format.xspec.report" value="${xspec.project.dir}/src/reporter/format-xspec-report.xsl"/>
  <!-- OXYGEN PATCH END -->

  <!-- 
    OXYGEN XSPEC REPORT VIEW PATCH START 
    
    Impose a custom compile stylesheet.
  -->
  <property name="compile.xspec.xsl"
    value="${xspec.project.dir}/src/compiler/generate-xspec-tests.xsl" />
	
  <property name="compile.xspec.xsl.driver" value="${xspec.project.dir}/oxygen-results-view/compile-driver.xsl" />
  <property name="xspec.template.name.entrypoint" value="" />
  <property name="xspec.xsl.driver" value="${xspec.dir}/${xspec.base}-driver.xsl" />
  
  <property name="xspec.skip.compile" value="false" />
	
  <property name="xspec.saxon.config" value="${xspec.project.dir}/oxygen-results-view/saxon-config.xml" />
	
	<property name="xspec.saxon.config.jar" value="${xspec.project.dir}/oxygen-results-view/saxon-extension.jar" />
	
  
  <!-- OXYGEN XSPEC REPORT VIEW PATCH END -->
  
	
	
  <!-- OXYGEN PATCH needed to control the cleanup of all intermediate files -->  
  <condition property="can.delete">
    <and>
      <equals arg1="${clean.output.dir}" arg2="true"/>
    </and>
  </condition>
  <!-- OXYGEN PATCH END -->
  
  <target name="xspec"
    description="Runs the XSpec unit tests in ${xspec.xml}">
    
  	<!--
  	
  	TODO Pass the xspec.template.name to the compile XSLT. If passed, the x:main
  	template will only call that template...
  	
  	 -->
  	
  	<!-- 

  	    Oxygen XSpec Report View Patch Start 
  	    
  	    Impose a custom compile stylesheet.
  	-->
  	<echo>Clean up</echo>
  	<delete dir="${xspec.dir}"/>
  	
  	<echo>Step 1. Compile the XSPEC into an XSLT</echo>
  	
	<echo>Saxon config: ${xspec.saxon.config}</echo>
  	
  	<java classname="net.sf.saxon.Transform"
  	      fork="true">
  	      <classpath>
  	        <pathelement path="${saxon.jar}"/>
  	        <pathelement path="${java.class.path}"/>
  	      	<pathelement path="${xspec.saxon.config.jar}"/>
  	      </classpath>
  	      
  	      <arg value="-catalog:${catalog}"/>
  	      <arg line="${saxon.custom.options}"/>
  	      
  	      <arg value="-ext:on" />
  	      <arg value="-s:${xspec.xml}" />
  	      <arg value="-o:${xspec.xsl}" />
  	      <arg value="-xsl:${compile.xspec.xsl}" />
  	    	
  	      <arg value="-config:${xspec.saxon.config}" />
  	    </java>
  	
  	<echo>Step 2. Create the Driver XSLT</echo>
  	<!-- 

  	  	    Oxygen XSpec Report View Patch Start 
  	  	    
  	  	    TODO Only if the parameter was passed....
  	-->
  	
  	
  	<echo>Apply driver to execute the templates: ${xspec.template.name.entrypoint}</echo>
    <makeurl file="${xspec.xsl}" property="xspec.xsl.uri"/>
  	
  	<java classname="net.sf.saxon.Transform"
  	      fork="true">
  	      <classpath>
  	        <pathelement path="${saxon.jar}"/>
  	        <pathelement path="${java.class.path}"/>
  	      	<pathelement path="${xspec.saxon.config.jar}"/>
  	      </classpath>
  	      
  	      <arg value="-catalog:${catalog}"/>
  	      <arg line="${saxon.custom.options}"/>
  	      
  	      <arg value="-ext:on" />
  	      <arg value="-s:${xspec.xml}" />
  	      <arg value="-o:${xspec.xsl.driver}" />
  	      <arg value="-xsl:${compile.xspec.xsl.driver}" />
  		
  		<arg value="xspec.template.name.entrypoint=${xspec.template.name.entrypoint}" />
  		<arg value="compiled-stylesheet-uri=${xspec.xsl.uri}" />
  	    	
  	      <arg value="-config:${xspec.saxon.config}" />
  	    </java>
    
  	<!-- 
  	
  	OXYGEN PATCH END 
  	
  	-->
    
    <!-- Can't specify initial template with <xslt> task so have to
		     fall back to running Saxon as Java app. -->
  	
  	<echo>Step 3. Execute the script</echo>
    <java classname="net.sf.saxon.Transform"
      fork="true">
      <!-- OXYGEN PATCH  We specify saxon together with our patches directly in the classpath-->
      <classpath>
        <pathelement path="${saxon.jar}"/>
        <pathelement path="${java.class.path}"/>
      	<pathelement path="${xspec.saxon.config.jar}"/>
      </classpath>
      <!-- OXYGEN PATCH END -->
      
      <!-- OXYGEN PATCH  Pass a catalog to Saxon. -->
      <arg value="-catalog:${catalog}"/>
      <!-- OXYGEN PATCH END -->
      
      <!-- OXYGEN PATCH  Pass custom options to Saxon, for example  -warnings:recover -strip:none -opt:10 -dtd:off -l:off -versionmsg:off -expand:on -outval:fatal -val:lax -->
      <arg line="${saxon.custom.options}"/>
      <!-- OXYGEN PATCH END -->
      
      <arg value="-ext:on" />
      <arg value="-s:${xspec.xml}" />
      <arg value="-o:${xspec.result.xml}" />
    	<!-- Oxygen XSpec Report View Patch Start  Call the driver -->
      <arg value="-xsl:${xspec.xsl.driver}" />
    	<!-- OXYGEN PATCH END  -->
    	
      <arg value="-it:{http://www.jenitennison.com/xslt/xspec}main" />
    	
      <arg value="-config:${xspec.saxon.config}" />
    </java>
  	
  	
  	<java classname="net.sf.saxon.Transform"
  	      fork="true">
  	      <classpath>
  	        <pathelement path="${saxon.jar}"/>
  	        <pathelement path="${java.class.path}"/>
  	        <pathelement path="${xspec.saxon.config.jar}"/>
  	      </classpath>
  	      
  	      <arg value="-catalog:${catalog}"/>
  	      
  	      <arg line="${saxon.custom.options}"/>
  	      
  	      <arg value="-ext:on" />
  	      <arg value="-s:${xspec.result.xml}" />
  	      <arg value="-o:${xspec.result.html}" />
  	      <arg value="-xsl:${format.xspec.report}" />
  	    	
  	      <arg value="-config:${xspec.saxon.config}" />
  	    </java>
  	
   
  	
    <loadfile srcfile="${xspec.result.xml}"
      property="xspec.result" />
    
    <!-- OXYGEN PATCH the result will be opened and the user can inspect it. A fail is too much -->
    <!--<fail message="XSpec tests failed. See ${xspec.result.html} for a report">
      <condition>
        <contains string="${xspec.result}" substring='successful="false"' />
      </condition>
    </fail>-->
    <!-- OXYGEN PATCH the result will be opened and the user can inspect it. A fail is too much -->
    
    <!-- OXYGEN PATCH copy the result to the user location and clean up if required.-->
    
    <antcall target="cleanup"/>
    <!-- OXYGEN PATCH copy the result to the user location and clean up if required.-->
  </target>
  
  
  <target name="echoproperties">
    <echoproperties />
  </target>
  
  <!-- OXYGEN PATCH copy the result to the user location and clean up if required.-->
  <target name="cleanup" if="can.delete">
    <echo>Clean up</echo>
    <delete dir="${xspec.dir}"/>
  </target>
  <!-- OXYGEN PATCH copy the result to the user location and clean up if required.-->
  
</project>


<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2008, 2010 Jeni Tennison                                -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
